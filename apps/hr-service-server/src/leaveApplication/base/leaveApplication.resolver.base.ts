/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LeaveApplication } from "./LeaveApplication";
import { LeaveApplicationCountArgs } from "./LeaveApplicationCountArgs";
import { LeaveApplicationFindManyArgs } from "./LeaveApplicationFindManyArgs";
import { LeaveApplicationFindUniqueArgs } from "./LeaveApplicationFindUniqueArgs";
import { CreateLeaveApplicationArgs } from "./CreateLeaveApplicationArgs";
import { UpdateLeaveApplicationArgs } from "./UpdateLeaveApplicationArgs";
import { DeleteLeaveApplicationArgs } from "./DeleteLeaveApplicationArgs";
import { Employee } from "../../employee/base/Employee";
import { LeaveApplicationService } from "../leaveApplication.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LeaveApplication)
export class LeaveApplicationResolverBase {
  constructor(
    protected readonly service: LeaveApplicationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LeaveApplication",
    action: "read",
    possession: "any",
  })
  async _leaveApplicationsMeta(
    @graphql.Args() args: LeaveApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LeaveApplication])
  @nestAccessControl.UseRoles({
    resource: "LeaveApplication",
    action: "read",
    possession: "any",
  })
  async leaveApplications(
    @graphql.Args() args: LeaveApplicationFindManyArgs
  ): Promise<LeaveApplication[]> {
    return this.service.leaveApplications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LeaveApplication, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LeaveApplication",
    action: "read",
    possession: "own",
  })
  async leaveApplication(
    @graphql.Args() args: LeaveApplicationFindUniqueArgs
  ): Promise<LeaveApplication | null> {
    const result = await this.service.leaveApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LeaveApplication)
  @nestAccessControl.UseRoles({
    resource: "LeaveApplication",
    action: "create",
    possession: "any",
  })
  async createLeaveApplication(
    @graphql.Args() args: CreateLeaveApplicationArgs
  ): Promise<LeaveApplication> {
    return await this.service.createLeaveApplication({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LeaveApplication)
  @nestAccessControl.UseRoles({
    resource: "LeaveApplication",
    action: "update",
    possession: "any",
  })
  async updateLeaveApplication(
    @graphql.Args() args: UpdateLeaveApplicationArgs
  ): Promise<LeaveApplication | null> {
    try {
      return await this.service.updateLeaveApplication({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LeaveApplication)
  @nestAccessControl.UseRoles({
    resource: "LeaveApplication",
    action: "delete",
    possession: "any",
  })
  async deleteLeaveApplication(
    @graphql.Args() args: DeleteLeaveApplicationArgs
  ): Promise<LeaveApplication | null> {
    try {
      return await this.service.deleteLeaveApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: LeaveApplication
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
