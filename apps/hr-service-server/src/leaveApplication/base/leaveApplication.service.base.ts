/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LeaveApplication as PrismaLeaveApplication,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class LeaveApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeaveApplicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leaveApplication.count(args);
  }

  async leaveApplications<T extends Prisma.LeaveApplicationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaveApplicationFindManyArgs>
  ): Promise<PrismaLeaveApplication[]> {
    return this.prisma.leaveApplication.findMany<Prisma.LeaveApplicationFindManyArgs>(
      args
    );
  }
  async leaveApplication<T extends Prisma.LeaveApplicationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaveApplicationFindUniqueArgs>
  ): Promise<PrismaLeaveApplication | null> {
    return this.prisma.leaveApplication.findUnique(args);
  }
  async createLeaveApplication<T extends Prisma.LeaveApplicationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaveApplicationCreateArgs>
  ): Promise<PrismaLeaveApplication> {
    return this.prisma.leaveApplication.create<T>(args);
  }
  async updateLeaveApplication<T extends Prisma.LeaveApplicationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaveApplicationUpdateArgs>
  ): Promise<PrismaLeaveApplication> {
    return this.prisma.leaveApplication.update<T>(args);
  }
  async deleteLeaveApplication<T extends Prisma.LeaveApplicationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeaveApplicationDeleteArgs>
  ): Promise<PrismaLeaveApplication> {
    return this.prisma.leaveApplication.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.leaveApplication
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
